Vagrant.configure("2") do |config|
  # Basic configuration
  config.vm.box = "ubuntu/focal64"

  # `vagrant plugin install vagrant-disksize`
  config.disksize.size = '50GB'

  # VirtualBox provider settings
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "6144"
    vb.cpus = 6
  end

  # Boot and halt timeouts
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600

  # NETWORK CONFIGURATION - BRIDGED MODE
  config.vm.network "public_network", bridge: "default"

  # Port forwarding for the DevOps stack
  config.vm.network "forwarded_port", guest: 8080, host: 30080   # Jenkins
  config.vm.network "forwarded_port", guest: 50000, host: 30500  # Jenkins agents
  config.vm.network "forwarded_port", guest: 9000, host: 30900   # SonarQube
  config.vm.network "forwarded_port", guest: 3001, host: 30301   # Grafana
  config.vm.network "forwarded_port", guest: 9090, host: 30990   # Prometheus
  config.vm.network "forwarded_port", guest: 6443, host: 30443   # Kubernetes API
  config.vm.network "forwarded_port", guest: 30090, host: 30909   # Prometheus UI
  config.vm.network "forwarded_port", guest: 32039, host: 30300   # Grafana UI

  # Complete installation of all tools
  config.vm.provision "shell", inline: <<-SHELL
    #!/bin/bash
    set -e

    echo "=== Installing Complete DevOps Stack ==="

    # Install GitHub CLI with robust error handling
    if ! command -v gh &> /dev/null; then
        echo "Installing GitHub CLI..."
        apt-get update
        apt-get install -y curl gnupg
        
        # Download and install GitHub CLI using the official method
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        
        # Add GitHub CLI repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        
        # Update and install
        apt-get update
        apt-get install -y gh
        
        # Verify installation
        if command -v gh &> /dev/null; then
            echo "GitHub CLI installed successfully - version: $(gh --version | head -1)"
        else
            echo "Warning: GitHub CLI installation may have failed, but continuing..."
        fi
    else
        echo "GitHub CLI is already installed - version: $(gh --version | head -1)"
    fi

    # Install Docker
    if ! command -v docker &> /dev/null; then
        echo "Installing Docker..."
        apt-get update
        apt-get install -y ca-certificates curl gnupg lsb-release
        
        # Add Docker's official GPG key
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
        
        # Add Docker repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Install Docker
        apt-get update
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        
        # Add vagrant user to docker group
        usermod -aG docker vagrant
        echo "Docker installed successfully"
    else
        echo "Docker is already installed"
    fi

    # Start and enable Docker service
    systemctl start docker
    systemctl enable docker

    # STABLE DOCKER CONFIGURATION - VERIFIED WORKING
    echo "Configuring Docker with stable settings..."
    
    # Remove any existing problematic configurations
    sudo rm -f /etc/systemd/system/docker.service.d/http-proxy.conf
    sudo rm -f /etc/docker/daemon.json
    
    # Create minimal, stable Docker configuration
    sudo mkdir -p /etc/docker
    sudo tee /etc/docker/daemon.json <<'DOCKERJSON'
{
  "dns": ["8.8.8.8", "8.8.4.4"],
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
DOCKERJSON

    systemctl daemon-reload
    systemctl restart docker
    
    # Wait for Docker to be ready
    echo "Waiting for Docker to start..."
    for i in {1..30}; do
        if docker info >/dev/null 2>&1; then
            echo "✅ Docker is running and responsive"
            break
        fi
        echo "Waiting for Docker... (attempt $i/30)"
        sleep 2
    done

    # Test Docker functionality
    echo "Testing Docker connectivity..."
    if timeout 30s docker run --rm hello-world | grep -q "Hello from Docker"; then
        echo "✅ Docker connectivity: SUCCESS"
    else
        echo "⚠️ Docker connectivity test failed, but continuing setup..."
    fi

    # Install Terraform
    if ! command -v terraform &> /dev/null; then
        echo "Installing Terraform..."
        apt-get update
        apt-get install -y wget unzip
        
        TERRAFORM_VERSION="1.5.7"
        wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
        unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
        mv terraform /usr/local/bin/
        rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
        echo "Terraform installed successfully"
    else
        echo "Terraform is already installed"
    fi

    # Configure Docker for k3s (using same stable configuration)
    echo "=== Configuring Docker for Kubernetes ==="
    sudo tee /etc/docker/daemon.json <<'DOCKERJSON'
{
  "dns": ["8.8.8.8", "8.8.4.4"],
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
DOCKERJSON

    systemctl daemon-reload
    systemctl restart docker

    # Install Kubernetes (k3s)
    if ! command -v k3s &> /dev/null; then
        echo "Installing Kubernetes (k3s)..."
        
        export INSTALL_K3S_VERSION="v1.27.4+k3s1"
        export K3S_KUBECONFIG_MODE="644"
        export INSTALL_K3S_EXEC="--docker --disable servicelb --cluster-init"
        
        curl -sfL https://get.k3s.io | sh -
        
        echo "Waiting for k3s to be ready..."
        for i in {1..30}; do
            if sudo k3s kubectl get nodes 2>/dev/null | grep -q Ready; then
                echo "K3s is ready!"
                break
            fi
            echo "Waiting for k3s... (attempt $i/30)"
            sleep 10
        done
        
        # Set up kubeconfig
        mkdir -p /home/vagrant/.kube
        sudo cp /etc/rancher/k3s/k3s.yaml /home/vagrant/.kube/config
        sudo chown vagrant:vagrant /home/vagrant/.kube/config
        sudo chmod 600 /home/vagrant/.kube/config
        
        # Update kubeconfig to use the bridged IP instead of localhost
        BRIDGED_IP=$(hostname -I | awk '{print $1}')
        sed -i "s/127.0.0.1:6443/${BRIDGED_IP}:6443/g" /home/vagrant/.kube/config
        
        echo "Kubernetes installed successfully"
    else
        echo "Kubernetes is already installed"
    fi

    # Install kubectl
    if ! command -v kubectl &> /dev/null; then
        echo "Installing kubectl..."
        KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
        curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm -f kubectl
        echo "kubectl installed successfully"
    else
        echo "kubectl is already installed"
    fi

    # Install Helm
    if ! command -v helm &> /dev/null; then
        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        echo "Helm installed successfully"
    else
        echo "Helm is already installed"
    fi

    # Setup environment and aliases
    cat >> /home/vagrant/.bashrc << 'EOF'
export PATH=$PATH:/usr/local/bin
export KUBECONFIG=/home/vagrant/.kube/config
alias k="kubectl"
alias check-tools="echo '=== Tools ===' && docker --version && echo '' && kubectl version --client && echo '' && helm version --short && echo '' && terraform version && echo '' && gh --version"
alias check-k8s="echo '=== Kubernetes ===' && kubectl get nodes && echo '' && kubectl get pods -A"

# Simple registry helper
docker-pull-smart() {
    if [ -z "$1" ]; then
        echo "Usage: docker-pull-smart <image>"
        return 1
    fi
    
    echo "Pulling: $1"
    if docker pull $1; then
        echo "✅ Success"
    else
        echo "❌ Failed to pull $1"
        return 1
    fi
}

# GitHub CLI aliases and helpers
alias gh-status="gh auth status"
alias gh-repos="gh repo list"
alias gh-prs="gh pr list"

# Function to clone a repo quickly
gh-clone() {
    if [ -z "$1" ]; then
        echo "Usage: gh-clone <owner>/<repo>"
        return 1
    fi
    gh repo clone "$1"
}

# Function to create a new repository
gh-create() {
    if [ -z "$1" ]; then
        echo "Usage: gh-create <repo-name> [--public|--private]"
        return 1
    fi
    gh repo create "$1" ${2:---private} --push
}

echo "=== Environment Ready ==="
echo "VM IP: $(hostname -I | awk '{print \$1}')"
echo "Docker: Stable configuration"
echo "Use: check-tools && check-k8s"
echo "Use: docker-pull-smart nginx:alpine"
EOF

    # Source the .bashrc for the current session
    source /home/vagrant/.bashrc

    # Display final information
    echo ""
    echo "=== STABLE DEVOPS STACK INSTALLED ==="
    echo "✅ Docker: Minimal stable configuration"
    echo "✅ Kubernetes: k3s with Docker runtime"
    echo "✅ All DevOps tools: GitHub CLI, Terraform, Helm, kubectl"
    echo "✅ Network: No proxy, direct connectivity"
    echo ""
    echo "VM IP Address: $(hostname -I | awk '{print $1}')"
    echo ""

    echo "=== QUICK COMMANDS ==="
    echo "check-tools                         # Verify all tools"
    echo "check-k8s                           # Check Kubernetes status"
    echo "docker-pull-smart nginx:alpine      # Test Docker connectivity"
    echo ""

    echo "=== INSTALLATION COMPLETE ==="
    echo "Run: vagrant ssh"
    echo "Then run: check-tools && check-k8s"
    
  SHELL
end
